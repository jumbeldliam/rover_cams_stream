/* automatically generated by rust-bindgen 0.64.0 */

pub type __int32_t = ::std::os::raw::c_int;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_off_t = __int64_t;
pub type __darwin_suseconds_t = __int32_t;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    const UNINIT: ::std::mem::MaybeUninit<__sbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    const UNINIT: ::std::mem::MaybeUninit<__sFILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._r) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._file) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lbfsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cookie) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._close) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._read) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._seek) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._write) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ub) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._extra) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ur) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ubuf) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._nbuf) as usize - ptr as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lb) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._blksize) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libusb_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libusb_device_handle {
    _unused: [u8; 0],
}
#[doc = " Success (no error)"]
pub const uvc_error_UVC_SUCCESS: uvc_error = 0;
#[doc = " Input/output error"]
pub const uvc_error_UVC_ERROR_IO: uvc_error = -1;
#[doc = " Invalid parameter"]
pub const uvc_error_UVC_ERROR_INVALID_PARAM: uvc_error = -2;
#[doc = " Access denied"]
pub const uvc_error_UVC_ERROR_ACCESS: uvc_error = -3;
#[doc = " No such device"]
pub const uvc_error_UVC_ERROR_NO_DEVICE: uvc_error = -4;
#[doc = " Entity not found"]
pub const uvc_error_UVC_ERROR_NOT_FOUND: uvc_error = -5;
#[doc = " Resource busy"]
pub const uvc_error_UVC_ERROR_BUSY: uvc_error = -6;
#[doc = " Operation timed out"]
pub const uvc_error_UVC_ERROR_TIMEOUT: uvc_error = -7;
#[doc = " Overflow"]
pub const uvc_error_UVC_ERROR_OVERFLOW: uvc_error = -8;
#[doc = " Pipe error"]
pub const uvc_error_UVC_ERROR_PIPE: uvc_error = -9;
#[doc = " System call interrupted"]
pub const uvc_error_UVC_ERROR_INTERRUPTED: uvc_error = -10;
#[doc = " Insufficient memory"]
pub const uvc_error_UVC_ERROR_NO_MEM: uvc_error = -11;
#[doc = " Operation not supported"]
pub const uvc_error_UVC_ERROR_NOT_SUPPORTED: uvc_error = -12;
#[doc = " Device is not UVC-compliant"]
pub const uvc_error_UVC_ERROR_INVALID_DEVICE: uvc_error = -50;
#[doc = " Mode not supported"]
pub const uvc_error_UVC_ERROR_INVALID_MODE: uvc_error = -51;
#[doc = " Resource has a callback (can't use polling and async)"]
pub const uvc_error_UVC_ERROR_CALLBACK_EXISTS: uvc_error = -52;
#[doc = " Undefined error"]
pub const uvc_error_UVC_ERROR_OTHER: uvc_error = -99;
#[doc = " UVC error types, based on libusb errors\n @ingroup diag"]
pub type uvc_error = ::std::os::raw::c_int;
#[doc = " UVC error types, based on libusb errors\n @ingroup diag"]
pub use self::uvc_error as uvc_error_t;
pub const uvc_frame_format_UVC_FRAME_FORMAT_UNKNOWN: uvc_frame_format = 0;
#[doc = " Any supported format"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_ANY: uvc_frame_format = 0;
#[doc = " Any supported format"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_UNCOMPRESSED: uvc_frame_format = 1;
#[doc = " Any supported format"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_COMPRESSED: uvc_frame_format = 2;
#[doc = " YUYV/YUV2/YUV422: YUV encoding with one luminance value per pixel and\n one UV (chrominance) pair for every two pixels."]
pub const uvc_frame_format_UVC_FRAME_FORMAT_YUYV: uvc_frame_format = 3;
#[doc = " YUYV/YUV2/YUV422: YUV encoding with one luminance value per pixel and\n one UV (chrominance) pair for every two pixels."]
pub const uvc_frame_format_UVC_FRAME_FORMAT_UYVY: uvc_frame_format = 4;
#[doc = " 24-bit RGB"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_RGB: uvc_frame_format = 5;
#[doc = " 24-bit RGB"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_BGR: uvc_frame_format = 6;
#[doc = " Motion-JPEG (or JPEG) encoded images"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_MJPEG: uvc_frame_format = 7;
#[doc = " Motion-JPEG (or JPEG) encoded images"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_H264: uvc_frame_format = 8;
#[doc = " Greyscale images"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_GRAY8: uvc_frame_format = 9;
#[doc = " Greyscale images"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_GRAY16: uvc_frame_format = 10;
#[doc = " Greyscale images"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_BY8: uvc_frame_format = 11;
#[doc = " Greyscale images"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_BA81: uvc_frame_format = 12;
#[doc = " Greyscale images"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_SGRBG8: uvc_frame_format = 13;
#[doc = " Greyscale images"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_SGBRG8: uvc_frame_format = 14;
#[doc = " Greyscale images"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_SRGGB8: uvc_frame_format = 15;
#[doc = " Greyscale images"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_SBGGR8: uvc_frame_format = 16;
#[doc = " YUV420: NV12"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_NV12: uvc_frame_format = 17;
#[doc = " YUV: P010"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_P010: uvc_frame_format = 18;
#[doc = " Number of formats understood"]
pub const uvc_frame_format_UVC_FRAME_FORMAT_COUNT: uvc_frame_format = 19;
#[doc = " Color coding of stream, transport-independent\n @ingroup streaming"]
pub type uvc_frame_format = ::std::os::raw::c_uint;
pub const uvc_vs_desc_subtype_UVC_VS_UNDEFINED: uvc_vs_desc_subtype = 0;
pub const uvc_vs_desc_subtype_UVC_VS_INPUT_HEADER: uvc_vs_desc_subtype = 1;
pub const uvc_vs_desc_subtype_UVC_VS_OUTPUT_HEADER: uvc_vs_desc_subtype = 2;
pub const uvc_vs_desc_subtype_UVC_VS_STILL_IMAGE_FRAME: uvc_vs_desc_subtype = 3;
pub const uvc_vs_desc_subtype_UVC_VS_FORMAT_UNCOMPRESSED: uvc_vs_desc_subtype = 4;
pub const uvc_vs_desc_subtype_UVC_VS_FRAME_UNCOMPRESSED: uvc_vs_desc_subtype = 5;
pub const uvc_vs_desc_subtype_UVC_VS_FORMAT_MJPEG: uvc_vs_desc_subtype = 6;
pub const uvc_vs_desc_subtype_UVC_VS_FRAME_MJPEG: uvc_vs_desc_subtype = 7;
pub const uvc_vs_desc_subtype_UVC_VS_FORMAT_MPEG2TS: uvc_vs_desc_subtype = 10;
pub const uvc_vs_desc_subtype_UVC_VS_FORMAT_DV: uvc_vs_desc_subtype = 12;
pub const uvc_vs_desc_subtype_UVC_VS_COLORFORMAT: uvc_vs_desc_subtype = 13;
pub const uvc_vs_desc_subtype_UVC_VS_FORMAT_FRAME_BASED: uvc_vs_desc_subtype = 16;
pub const uvc_vs_desc_subtype_UVC_VS_FRAME_FRAME_BASED: uvc_vs_desc_subtype = 17;
pub const uvc_vs_desc_subtype_UVC_VS_FORMAT_STREAM_BASED: uvc_vs_desc_subtype = 18;
#[doc = " VideoStreaming interface descriptor subtype (A.6)"]
pub type uvc_vs_desc_subtype = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_still_frame_res {
    pub prev: *mut uvc_still_frame_res,
    pub next: *mut uvc_still_frame_res,
    pub bResolutionIndex: u8,
    #[doc = " Image width"]
    pub wWidth: u16,
    #[doc = " Image height"]
    pub wHeight: u16,
}
#[test]
fn bindgen_test_layout_uvc_still_frame_res() {
    const UNINIT: ::std::mem::MaybeUninit<uvc_still_frame_res> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uvc_still_frame_res>(),
        24usize,
        concat!("Size of: ", stringify!(uvc_still_frame_res))
    );
    assert_eq!(
        ::std::mem::align_of::<uvc_still_frame_res>(),
        8usize,
        concat!("Alignment of ", stringify!(uvc_still_frame_res))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_frame_res),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_frame_res),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bResolutionIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_frame_res),
            "::",
            stringify!(bResolutionIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wWidth) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_frame_res),
            "::",
            stringify!(wWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wHeight) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_frame_res),
            "::",
            stringify!(wHeight)
        )
    );
}
pub type uvc_still_frame_res_t = uvc_still_frame_res;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_still_frame_desc {
    pub parent: *mut uvc_format_desc,
    pub prev: *mut uvc_still_frame_desc,
    pub next: *mut uvc_still_frame_desc,
    #[doc = " Type of frame, such as JPEG frame or uncompressed frme"]
    pub bDescriptorSubtype: uvc_vs_desc_subtype,
    #[doc = " Index of the frame within the list of specs available for this format"]
    pub bEndPointAddress: u8,
    pub imageSizePatterns: *mut uvc_still_frame_res_t,
    pub bNumCompressionPattern: u8,
    pub bCompression: *mut u8,
}
#[test]
fn bindgen_test_layout_uvc_still_frame_desc() {
    const UNINIT: ::std::mem::MaybeUninit<uvc_still_frame_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uvc_still_frame_desc>(),
        56usize,
        concat!("Size of: ", stringify!(uvc_still_frame_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<uvc_still_frame_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(uvc_still_frame_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_frame_desc),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_frame_desc),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_frame_desc),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorSubtype) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_frame_desc),
            "::",
            stringify!(bDescriptorSubtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEndPointAddress) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_frame_desc),
            "::",
            stringify!(bEndPointAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageSizePatterns) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_frame_desc),
            "::",
            stringify!(imageSizePatterns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumCompressionPattern) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_frame_desc),
            "::",
            stringify!(bNumCompressionPattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bCompression) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_frame_desc),
            "::",
            stringify!(bCompression)
        )
    );
}
pub type uvc_still_frame_desc_t = uvc_still_frame_desc;
#[doc = " Frame descriptor\n\n A \"frame\" is a configuration of a streaming format\n for a particular image size at one of possibly several\n available frame rates."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_frame_desc {
    pub parent: *mut uvc_format_desc,
    pub prev: *mut uvc_frame_desc,
    pub next: *mut uvc_frame_desc,
    #[doc = " Type of frame, such as JPEG frame or uncompressed frme"]
    pub bDescriptorSubtype: uvc_vs_desc_subtype,
    #[doc = " Index of the frame within the list of specs available for this format"]
    pub bFrameIndex: u8,
    pub bmCapabilities: u8,
    #[doc = " Image width"]
    pub wWidth: u16,
    #[doc = " Image height"]
    pub wHeight: u16,
    #[doc = " Bitrate of corresponding stream at minimal frame rate"]
    pub dwMinBitRate: u32,
    #[doc = " Bitrate of corresponding stream at maximal frame rate"]
    pub dwMaxBitRate: u32,
    #[doc = " Maximum number of bytes for a video frame"]
    pub dwMaxVideoFrameBufferSize: u32,
    #[doc = " Default frame interval (in 100ns units)"]
    pub dwDefaultFrameInterval: u32,
    #[doc = " Minimum frame interval for continuous mode (100ns units)"]
    pub dwMinFrameInterval: u32,
    #[doc = " Maximum frame interval for continuous mode (100ns units)"]
    pub dwMaxFrameInterval: u32,
    #[doc = " Granularity of frame interval range for continuous mode (100ns)"]
    pub dwFrameIntervalStep: u32,
    #[doc = " Frame intervals"]
    pub bFrameIntervalType: u8,
    #[doc = " number of bytes per line"]
    pub dwBytesPerLine: u32,
    #[doc = " Available frame rates, zero-terminated (in 100ns units)"]
    pub intervals: *mut u32,
}
#[test]
fn bindgen_test_layout_uvc_frame_desc() {
    const UNINIT: ::std::mem::MaybeUninit<uvc_frame_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uvc_frame_desc>(),
        80usize,
        concat!("Size of: ", stringify!(uvc_frame_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<uvc_frame_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(uvc_frame_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorSubtype) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(bDescriptorSubtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFrameIndex) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(bFrameIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmCapabilities) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(bmCapabilities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wWidth) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(wWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wHeight) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(wHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwMinBitRate) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(dwMinBitRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwMaxBitRate) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(dwMaxBitRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwMaxVideoFrameBufferSize) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(dwMaxVideoFrameBufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwDefaultFrameInterval) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(dwDefaultFrameInterval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwMinFrameInterval) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(dwMinFrameInterval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwMaxFrameInterval) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(dwMaxFrameInterval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwFrameIntervalStep) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(dwFrameIntervalStep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFrameIntervalType) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(bFrameIntervalType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwBytesPerLine) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(dwBytesPerLine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intervals) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame_desc),
            "::",
            stringify!(intervals)
        )
    );
}
#[doc = " Frame descriptor\n\n A \"frame\" is a configuration of a streaming format\n for a particular image size at one of possibly several\n available frame rates."]
pub type uvc_frame_desc_t = uvc_frame_desc;
#[doc = " Format descriptor\n\n A \"format\" determines a stream's image type (e.g., raw YUYV or JPEG)\n and includes many \"frame\" configurations."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uvc_format_desc {
    pub parent: *mut uvc_streaming_interface,
    pub prev: *mut uvc_format_desc,
    pub next: *mut uvc_format_desc,
    #[doc = " Type of image stream, such as JPEG or uncompressed."]
    pub bDescriptorSubtype: uvc_vs_desc_subtype,
    #[doc = " Identifier of this format within the VS interface's format list"]
    pub bFormatIndex: u8,
    pub bNumFrameDescriptors: u8,
    pub __bindgen_anon_1: uvc_format_desc__bindgen_ty_1,
    pub __bindgen_anon_2: uvc_format_desc__bindgen_ty_2,
    #[doc = " Default {uvc_frame_desc} to choose given this format"]
    pub bDefaultFrameIndex: u8,
    pub bAspectRatioX: u8,
    pub bAspectRatioY: u8,
    pub bmInterlaceFlags: u8,
    pub bCopyProtect: u8,
    pub bVariableSize: u8,
    #[doc = " Available frame specifications for this format"]
    pub frame_descs: *mut uvc_frame_desc,
    pub still_frame_desc: *mut uvc_still_frame_desc,
}
#[doc = " Format specifier"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union uvc_format_desc__bindgen_ty_1 {
    pub guidFormat: [u8; 16usize],
    pub fourccFormat: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_uvc_format_desc__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<uvc_format_desc__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uvc_format_desc__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(uvc_format_desc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<uvc_format_desc__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(uvc_format_desc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guidFormat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc__bindgen_ty_1),
            "::",
            stringify!(guidFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fourccFormat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc__bindgen_ty_1),
            "::",
            stringify!(fourccFormat)
        )
    );
}
#[doc = " Format-specific data"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union uvc_format_desc__bindgen_ty_2 {
    #[doc = " BPP for uncompressed stream"]
    pub bBitsPerPixel: u8,
    #[doc = " Flags for JPEG stream"]
    pub bmFlags: u8,
}
#[test]
fn bindgen_test_layout_uvc_format_desc__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<uvc_format_desc__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uvc_format_desc__bindgen_ty_2>(),
        1usize,
        concat!("Size of: ", stringify!(uvc_format_desc__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<uvc_format_desc__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(uvc_format_desc__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bBitsPerPixel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc__bindgen_ty_2),
            "::",
            stringify!(bBitsPerPixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc__bindgen_ty_2),
            "::",
            stringify!(bmFlags)
        )
    );
}
#[test]
fn bindgen_test_layout_uvc_format_desc() {
    const UNINIT: ::std::mem::MaybeUninit<uvc_format_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uvc_format_desc>(),
        72usize,
        concat!("Size of: ", stringify!(uvc_format_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<uvc_format_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(uvc_format_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorSubtype) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc),
            "::",
            stringify!(bDescriptorSubtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFormatIndex) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc),
            "::",
            stringify!(bFormatIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumFrameDescriptors) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc),
            "::",
            stringify!(bNumFrameDescriptors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDefaultFrameIndex) as usize - ptr as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc),
            "::",
            stringify!(bDefaultFrameIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAspectRatioX) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc),
            "::",
            stringify!(bAspectRatioX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAspectRatioY) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc),
            "::",
            stringify!(bAspectRatioY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmInterlaceFlags) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc),
            "::",
            stringify!(bmInterlaceFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bCopyProtect) as usize - ptr as usize },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc),
            "::",
            stringify!(bCopyProtect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bVariableSize) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc),
            "::",
            stringify!(bVariableSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_descs) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc),
            "::",
            stringify!(frame_descs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).still_frame_desc) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_format_desc),
            "::",
            stringify!(still_frame_desc)
        )
    );
}
#[doc = " Format descriptor\n\n A \"format\" determines a stream's image type (e.g., raw YUYV or JPEG)\n and includes many \"frame\" configurations."]
pub type uvc_format_desc_t = uvc_format_desc;
pub const uvc_req_code_UVC_RC_UNDEFINED: uvc_req_code = 0;
pub const uvc_req_code_UVC_SET_CUR: uvc_req_code = 1;
pub const uvc_req_code_UVC_GET_CUR: uvc_req_code = 129;
pub const uvc_req_code_UVC_GET_MIN: uvc_req_code = 130;
pub const uvc_req_code_UVC_GET_MAX: uvc_req_code = 131;
pub const uvc_req_code_UVC_GET_RES: uvc_req_code = 132;
pub const uvc_req_code_UVC_GET_LEN: uvc_req_code = 133;
pub const uvc_req_code_UVC_GET_INFO: uvc_req_code = 134;
pub const uvc_req_code_UVC_GET_DEF: uvc_req_code = 135;
#[doc = " UVC request code (A.8)"]
pub type uvc_req_code = ::std::os::raw::c_uint;
pub const uvc_device_power_mode_UVC_VC_VIDEO_POWER_MODE_FULL: uvc_device_power_mode = 11;
pub const uvc_device_power_mode_UVC_VC_VIDEO_POWER_MODE_DEVICE_DEPENDENT: uvc_device_power_mode =
    27;
pub type uvc_device_power_mode = ::std::os::raw::c_uint;
pub const uvc_ct_ctrl_selector_UVC_CT_CONTROL_UNDEFINED: uvc_ct_ctrl_selector = 0;
pub const uvc_ct_ctrl_selector_UVC_CT_SCANNING_MODE_CONTROL: uvc_ct_ctrl_selector = 1;
pub const uvc_ct_ctrl_selector_UVC_CT_AE_MODE_CONTROL: uvc_ct_ctrl_selector = 2;
pub const uvc_ct_ctrl_selector_UVC_CT_AE_PRIORITY_CONTROL: uvc_ct_ctrl_selector = 3;
pub const uvc_ct_ctrl_selector_UVC_CT_EXPOSURE_TIME_ABSOLUTE_CONTROL: uvc_ct_ctrl_selector = 4;
pub const uvc_ct_ctrl_selector_UVC_CT_EXPOSURE_TIME_RELATIVE_CONTROL: uvc_ct_ctrl_selector = 5;
pub const uvc_ct_ctrl_selector_UVC_CT_FOCUS_ABSOLUTE_CONTROL: uvc_ct_ctrl_selector = 6;
pub const uvc_ct_ctrl_selector_UVC_CT_FOCUS_RELATIVE_CONTROL: uvc_ct_ctrl_selector = 7;
pub const uvc_ct_ctrl_selector_UVC_CT_FOCUS_AUTO_CONTROL: uvc_ct_ctrl_selector = 8;
pub const uvc_ct_ctrl_selector_UVC_CT_IRIS_ABSOLUTE_CONTROL: uvc_ct_ctrl_selector = 9;
pub const uvc_ct_ctrl_selector_UVC_CT_IRIS_RELATIVE_CONTROL: uvc_ct_ctrl_selector = 10;
pub const uvc_ct_ctrl_selector_UVC_CT_ZOOM_ABSOLUTE_CONTROL: uvc_ct_ctrl_selector = 11;
pub const uvc_ct_ctrl_selector_UVC_CT_ZOOM_RELATIVE_CONTROL: uvc_ct_ctrl_selector = 12;
pub const uvc_ct_ctrl_selector_UVC_CT_PANTILT_ABSOLUTE_CONTROL: uvc_ct_ctrl_selector = 13;
pub const uvc_ct_ctrl_selector_UVC_CT_PANTILT_RELATIVE_CONTROL: uvc_ct_ctrl_selector = 14;
pub const uvc_ct_ctrl_selector_UVC_CT_ROLL_ABSOLUTE_CONTROL: uvc_ct_ctrl_selector = 15;
pub const uvc_ct_ctrl_selector_UVC_CT_ROLL_RELATIVE_CONTROL: uvc_ct_ctrl_selector = 16;
pub const uvc_ct_ctrl_selector_UVC_CT_PRIVACY_CONTROL: uvc_ct_ctrl_selector = 17;
pub const uvc_ct_ctrl_selector_UVC_CT_FOCUS_SIMPLE_CONTROL: uvc_ct_ctrl_selector = 18;
pub const uvc_ct_ctrl_selector_UVC_CT_DIGITAL_WINDOW_CONTROL: uvc_ct_ctrl_selector = 19;
pub const uvc_ct_ctrl_selector_UVC_CT_REGION_OF_INTEREST_CONTROL: uvc_ct_ctrl_selector = 20;
#[doc = " Camera terminal control selector (A.9.4)"]
pub type uvc_ct_ctrl_selector = ::std::os::raw::c_uint;
pub const uvc_pu_ctrl_selector_UVC_PU_CONTROL_UNDEFINED: uvc_pu_ctrl_selector = 0;
pub const uvc_pu_ctrl_selector_UVC_PU_BACKLIGHT_COMPENSATION_CONTROL: uvc_pu_ctrl_selector = 1;
pub const uvc_pu_ctrl_selector_UVC_PU_BRIGHTNESS_CONTROL: uvc_pu_ctrl_selector = 2;
pub const uvc_pu_ctrl_selector_UVC_PU_CONTRAST_CONTROL: uvc_pu_ctrl_selector = 3;
pub const uvc_pu_ctrl_selector_UVC_PU_GAIN_CONTROL: uvc_pu_ctrl_selector = 4;
pub const uvc_pu_ctrl_selector_UVC_PU_POWER_LINE_FREQUENCY_CONTROL: uvc_pu_ctrl_selector = 5;
pub const uvc_pu_ctrl_selector_UVC_PU_HUE_CONTROL: uvc_pu_ctrl_selector = 6;
pub const uvc_pu_ctrl_selector_UVC_PU_SATURATION_CONTROL: uvc_pu_ctrl_selector = 7;
pub const uvc_pu_ctrl_selector_UVC_PU_SHARPNESS_CONTROL: uvc_pu_ctrl_selector = 8;
pub const uvc_pu_ctrl_selector_UVC_PU_GAMMA_CONTROL: uvc_pu_ctrl_selector = 9;
pub const uvc_pu_ctrl_selector_UVC_PU_WHITE_BALANCE_TEMPERATURE_CONTROL: uvc_pu_ctrl_selector = 10;
pub const uvc_pu_ctrl_selector_UVC_PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL: uvc_pu_ctrl_selector =
    11;
pub const uvc_pu_ctrl_selector_UVC_PU_WHITE_BALANCE_COMPONENT_CONTROL: uvc_pu_ctrl_selector = 12;
pub const uvc_pu_ctrl_selector_UVC_PU_WHITE_BALANCE_COMPONENT_AUTO_CONTROL: uvc_pu_ctrl_selector =
    13;
pub const uvc_pu_ctrl_selector_UVC_PU_DIGITAL_MULTIPLIER_CONTROL: uvc_pu_ctrl_selector = 14;
pub const uvc_pu_ctrl_selector_UVC_PU_DIGITAL_MULTIPLIER_LIMIT_CONTROL: uvc_pu_ctrl_selector = 15;
pub const uvc_pu_ctrl_selector_UVC_PU_HUE_AUTO_CONTROL: uvc_pu_ctrl_selector = 16;
pub const uvc_pu_ctrl_selector_UVC_PU_ANALOG_VIDEO_STANDARD_CONTROL: uvc_pu_ctrl_selector = 17;
pub const uvc_pu_ctrl_selector_UVC_PU_ANALOG_LOCK_STATUS_CONTROL: uvc_pu_ctrl_selector = 18;
pub const uvc_pu_ctrl_selector_UVC_PU_CONTRAST_AUTO_CONTROL: uvc_pu_ctrl_selector = 19;
#[doc = " Processing unit control selector (A.9.5)"]
pub type uvc_pu_ctrl_selector = ::std::os::raw::c_uint;
pub const uvc_term_type_UVC_TT_VENDOR_SPECIFIC: uvc_term_type = 256;
pub const uvc_term_type_UVC_TT_STREAMING: uvc_term_type = 257;
#[doc = " USB terminal type (B.1)"]
pub type uvc_term_type = ::std::os::raw::c_uint;
pub const uvc_it_type_UVC_ITT_VENDOR_SPECIFIC: uvc_it_type = 512;
pub const uvc_it_type_UVC_ITT_CAMERA: uvc_it_type = 513;
pub const uvc_it_type_UVC_ITT_MEDIA_TRANSPORT_INPUT: uvc_it_type = 514;
#[doc = " Input terminal type (B.2)"]
pub type uvc_it_type = ::std::os::raw::c_uint;
pub const uvc_ot_type_UVC_OTT_VENDOR_SPECIFIC: uvc_ot_type = 768;
pub const uvc_ot_type_UVC_OTT_DISPLAY: uvc_ot_type = 769;
pub const uvc_ot_type_UVC_OTT_MEDIA_TRANSPORT_OUTPUT: uvc_ot_type = 770;
#[doc = " Output terminal type (B.3)"]
pub type uvc_ot_type = ::std::os::raw::c_uint;
pub const uvc_et_type_UVC_EXTERNAL_VENDOR_SPECIFIC: uvc_et_type = 1024;
pub const uvc_et_type_UVC_COMPOSITE_CONNECTOR: uvc_et_type = 1025;
pub const uvc_et_type_UVC_SVIDEO_CONNECTOR: uvc_et_type = 1026;
pub const uvc_et_type_UVC_COMPONENT_CONNECTOR: uvc_et_type = 1027;
#[doc = " External terminal type (B.4)"]
pub type uvc_et_type = ::std::os::raw::c_uint;
#[doc = " Context, equivalent to libusb's contexts.\n\n May either own a libusb context or use one that's already made.\n\n Always create these with uvc_get_context."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_context {
    _unused: [u8; 0],
}
pub type uvc_context_t = uvc_context;
#[doc = " UVC device.\n\n Get this from uvc_get_device_list() or uvc_find_device()."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_device {
    _unused: [u8; 0],
}
pub type uvc_device_t = uvc_device;
#[doc = " Handle on an open UVC device.\n\n Get one of these from uvc_open(). Once you uvc_close()\n it, it's no longer valid."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_device_handle {
    _unused: [u8; 0],
}
pub type uvc_device_handle_t = uvc_device_handle;
#[doc = " Handle on an open UVC stream.\n\n Get one of these from uvc_stream_open*().\n Once you uvc_stream_close() it, it will no longer be valid."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_stream_handle {
    _unused: [u8; 0],
}
pub type uvc_stream_handle_t = uvc_stream_handle;
#[doc = " Representation of the interface that brings data into the UVC device"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_input_terminal {
    pub prev: *mut uvc_input_terminal,
    pub next: *mut uvc_input_terminal,
    #[doc = " Index of the terminal within the device"]
    pub bTerminalID: u8,
    #[doc = " Type of terminal (e.g., camera)"]
    pub wTerminalType: uvc_it_type,
    pub wObjectiveFocalLengthMin: u16,
    pub wObjectiveFocalLengthMax: u16,
    pub wOcularFocalLength: u16,
    #[doc = " Camera controls (meaning of bits given in {uvc_ct_ctrl_selector})"]
    pub bmControls: u64,
}
#[test]
fn bindgen_test_layout_uvc_input_terminal() {
    const UNINIT: ::std::mem::MaybeUninit<uvc_input_terminal> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uvc_input_terminal>(),
        40usize,
        concat!("Size of: ", stringify!(uvc_input_terminal))
    );
    assert_eq!(
        ::std::mem::align_of::<uvc_input_terminal>(),
        8usize,
        concat!("Alignment of ", stringify!(uvc_input_terminal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_input_terminal),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_input_terminal),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bTerminalID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_input_terminal),
            "::",
            stringify!(bTerminalID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wTerminalType) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_input_terminal),
            "::",
            stringify!(wTerminalType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wObjectiveFocalLengthMin) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_input_terminal),
            "::",
            stringify!(wObjectiveFocalLengthMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wObjectiveFocalLengthMax) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_input_terminal),
            "::",
            stringify!(wObjectiveFocalLengthMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOcularFocalLength) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_input_terminal),
            "::",
            stringify!(wOcularFocalLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmControls) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_input_terminal),
            "::",
            stringify!(bmControls)
        )
    );
}
#[doc = " Representation of the interface that brings data into the UVC device"]
pub type uvc_input_terminal_t = uvc_input_terminal;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_output_terminal {
    pub prev: *mut uvc_output_terminal,
    pub next: *mut uvc_output_terminal,
}
#[test]
fn bindgen_test_layout_uvc_output_terminal() {
    const UNINIT: ::std::mem::MaybeUninit<uvc_output_terminal> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uvc_output_terminal>(),
        16usize,
        concat!("Size of: ", stringify!(uvc_output_terminal))
    );
    assert_eq!(
        ::std::mem::align_of::<uvc_output_terminal>(),
        8usize,
        concat!("Alignment of ", stringify!(uvc_output_terminal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_output_terminal),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_output_terminal),
            "::",
            stringify!(next)
        )
    );
}
pub type uvc_output_terminal_t = uvc_output_terminal;
#[doc = " Represents post-capture processing functions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_processing_unit {
    pub prev: *mut uvc_processing_unit,
    pub next: *mut uvc_processing_unit,
    #[doc = " Index of the processing unit within the device"]
    pub bUnitID: u8,
    #[doc = " Index of the terminal from which the device accepts images"]
    pub bSourceID: u8,
    #[doc = " Processing controls (meaning of bits given in {uvc_pu_ctrl_selector})"]
    pub bmControls: u64,
}
#[test]
fn bindgen_test_layout_uvc_processing_unit() {
    const UNINIT: ::std::mem::MaybeUninit<uvc_processing_unit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uvc_processing_unit>(),
        32usize,
        concat!("Size of: ", stringify!(uvc_processing_unit))
    );
    assert_eq!(
        ::std::mem::align_of::<uvc_processing_unit>(),
        8usize,
        concat!("Alignment of ", stringify!(uvc_processing_unit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_processing_unit),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_processing_unit),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bUnitID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_processing_unit),
            "::",
            stringify!(bUnitID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSourceID) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_processing_unit),
            "::",
            stringify!(bSourceID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmControls) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_processing_unit),
            "::",
            stringify!(bmControls)
        )
    );
}
#[doc = " Represents post-capture processing functions"]
pub type uvc_processing_unit_t = uvc_processing_unit;
#[doc = " Represents selector unit to connect other units"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_selector_unit {
    pub prev: *mut uvc_selector_unit,
    pub next: *mut uvc_selector_unit,
    #[doc = " Index of the selector unit within the device"]
    pub bUnitID: u8,
}
#[test]
fn bindgen_test_layout_uvc_selector_unit() {
    const UNINIT: ::std::mem::MaybeUninit<uvc_selector_unit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uvc_selector_unit>(),
        24usize,
        concat!("Size of: ", stringify!(uvc_selector_unit))
    );
    assert_eq!(
        ::std::mem::align_of::<uvc_selector_unit>(),
        8usize,
        concat!("Alignment of ", stringify!(uvc_selector_unit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_selector_unit),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_selector_unit),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bUnitID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_selector_unit),
            "::",
            stringify!(bUnitID)
        )
    );
}
#[doc = " Represents selector unit to connect other units"]
pub type uvc_selector_unit_t = uvc_selector_unit;
#[doc = " Custom processing or camera-control functions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_extension_unit {
    pub prev: *mut uvc_extension_unit,
    pub next: *mut uvc_extension_unit,
    #[doc = " Index of the extension unit within the device"]
    pub bUnitID: u8,
    #[doc = " GUID identifying the extension unit"]
    pub guidExtensionCode: [u8; 16usize],
    #[doc = " Bitmap of available controls (manufacturer-dependent)"]
    pub bmControls: u64,
}
#[test]
fn bindgen_test_layout_uvc_extension_unit() {
    const UNINIT: ::std::mem::MaybeUninit<uvc_extension_unit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uvc_extension_unit>(),
        48usize,
        concat!("Size of: ", stringify!(uvc_extension_unit))
    );
    assert_eq!(
        ::std::mem::align_of::<uvc_extension_unit>(),
        8usize,
        concat!("Alignment of ", stringify!(uvc_extension_unit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_extension_unit),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_extension_unit),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bUnitID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_extension_unit),
            "::",
            stringify!(bUnitID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guidExtensionCode) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_extension_unit),
            "::",
            stringify!(guidExtensionCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmControls) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_extension_unit),
            "::",
            stringify!(bmControls)
        )
    );
}
#[doc = " Custom processing or camera-control functions"]
pub type uvc_extension_unit_t = uvc_extension_unit;
pub const uvc_status_class_UVC_STATUS_CLASS_CONTROL: uvc_status_class = 16;
pub const uvc_status_class_UVC_STATUS_CLASS_CONTROL_CAMERA: uvc_status_class = 17;
pub const uvc_status_class_UVC_STATUS_CLASS_CONTROL_PROCESSING: uvc_status_class = 18;
pub type uvc_status_class = ::std::os::raw::c_uint;
pub const uvc_status_attribute_UVC_STATUS_ATTRIBUTE_VALUE_CHANGE: uvc_status_attribute = 0;
pub const uvc_status_attribute_UVC_STATUS_ATTRIBUTE_INFO_CHANGE: uvc_status_attribute = 1;
pub const uvc_status_attribute_UVC_STATUS_ATTRIBUTE_FAILURE_CHANGE: uvc_status_attribute = 2;
pub const uvc_status_attribute_UVC_STATUS_ATTRIBUTE_UNKNOWN: uvc_status_attribute = 255;
pub type uvc_status_attribute = ::std::os::raw::c_uint;
#[doc = " A callback function to accept status updates\n @ingroup device"]
pub type uvc_status_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        status_class: uvc_status_class,
        event: ::std::os::raw::c_int,
        selector: ::std::os::raw::c_int,
        status_attribute: uvc_status_attribute,
        data: *mut ::std::os::raw::c_void,
        data_len: usize,
        user_ptr: *mut ::std::os::raw::c_void,
    ),
>;
#[doc = " A callback function to accept button events\n @ingroup device"]
pub type uvc_button_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        button: ::std::os::raw::c_int,
        state: ::std::os::raw::c_int,
        user_ptr: *mut ::std::os::raw::c_void,
    ),
>;
#[doc = " Structure representing a UVC device descriptor.\n\n (This isn't a standard structure.)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_device_descriptor {
    #[doc = " Vendor ID"]
    pub idVendor: u16,
    #[doc = " Product ID"]
    pub idProduct: u16,
    #[doc = " UVC compliance level, e.g. 0x0100 (1.0), 0x0110"]
    pub bcdUVC: u16,
    #[doc = " Serial number (null if unavailable)"]
    pub serialNumber: *const ::std::os::raw::c_char,
    #[doc = " Device-reported manufacturer name (or null)"]
    pub manufacturer: *const ::std::os::raw::c_char,
    #[doc = " Device-reporter product name (or null)"]
    pub product: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_uvc_device_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<uvc_device_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uvc_device_descriptor>(),
        32usize,
        concat!("Size of: ", stringify!(uvc_device_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<uvc_device_descriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(uvc_device_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idVendor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_device_descriptor),
            "::",
            stringify!(idVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idProduct) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_device_descriptor),
            "::",
            stringify!(idProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bcdUVC) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_device_descriptor),
            "::",
            stringify!(bcdUVC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serialNumber) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_device_descriptor),
            "::",
            stringify!(serialNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manufacturer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_device_descriptor),
            "::",
            stringify!(manufacturer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_device_descriptor),
            "::",
            stringify!(product)
        )
    );
}
#[doc = " Structure representing a UVC device descriptor.\n\n (This isn't a standard structure.)"]
pub type uvc_device_descriptor_t = uvc_device_descriptor;
#[doc = " An image frame received from the UVC device\n @ingroup streaming"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_frame {
    #[doc = " Image data for this frame"]
    pub data: *mut ::std::os::raw::c_void,
    #[doc = " Size of image data buffer"]
    pub data_bytes: usize,
    #[doc = " Width of image in pixels"]
    pub width: u32,
    #[doc = " Height of image in pixels"]
    pub height: u32,
    #[doc = " Pixel data format"]
    pub frame_format: uvc_frame_format,
    #[doc = " Number of bytes per horizontal line (undefined for compressed format)"]
    pub step: usize,
    #[doc = " Frame number (may skip, but is strictly monotonically increasing)"]
    pub sequence: u32,
    #[doc = " Estimate of system time when the device started capturing the image"]
    pub capture_time: timeval,
    #[doc = " Estimate of system time when the device finished receiving the image"]
    pub capture_time_finished: timespec,
    #[doc = " Handle on the device that produced the image.\n @warning You must not call any uvc_* functions during a callback."]
    pub source: *mut uvc_device_handle_t,
    #[doc = " Is the data buffer owned by the library?\n If 1, the data buffer can be arbitrarily reallocated by frame conversion\n functions.\n If 0, the data buffer will not be reallocated or freed by the library.\n Set this field to zero if you are supplying the buffer."]
    pub library_owns_data: u8,
    #[doc = " Metadata for this frame if available"]
    pub metadata: *mut ::std::os::raw::c_void,
    #[doc = " Size of metadata buffer"]
    pub metadata_bytes: usize,
}
#[test]
fn bindgen_test_layout_uvc_frame() {
    const UNINIT: ::std::mem::MaybeUninit<uvc_frame> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uvc_frame>(),
        112usize,
        concat!("Size of: ", stringify!(uvc_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<uvc_frame>(),
        8usize,
        concat!("Alignment of ", stringify!(uvc_frame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame),
            "::",
            stringify!(data_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_format) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame),
            "::",
            stringify!(frame_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequence) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capture_time) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame),
            "::",
            stringify!(capture_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capture_time_finished) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame),
            "::",
            stringify!(capture_time_finished)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).library_owns_data) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame),
            "::",
            stringify!(library_owns_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame),
            "::",
            stringify!(metadata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadata_bytes) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_frame),
            "::",
            stringify!(metadata_bytes)
        )
    );
}
#[doc = " An image frame received from the UVC device\n @ingroup streaming"]
pub type uvc_frame_t = uvc_frame;
#[doc = " A callback function to handle incoming assembled UVC frames\n @ingroup streaming"]
pub type uvc_frame_callback_t = ::std::option::Option<
    unsafe extern "C" fn(frame: *mut uvc_frame, user_ptr: *mut ::std::os::raw::c_void),
>;
#[doc = " Streaming mode, includes all information needed to select stream\n @ingroup streaming"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_stream_ctrl {
    pub bmHint: u16,
    pub bFormatIndex: u8,
    pub bFrameIndex: u8,
    pub dwFrameInterval: u32,
    pub wKeyFrameRate: u16,
    pub wPFrameRate: u16,
    pub wCompQuality: u16,
    pub wCompWindowSize: u16,
    pub wDelay: u16,
    pub dwMaxVideoFrameSize: u32,
    pub dwMaxPayloadTransferSize: u32,
    pub dwClockFrequency: u32,
    pub bmFramingInfo: u8,
    pub bPreferredVersion: u8,
    pub bMinVersion: u8,
    pub bMaxVersion: u8,
    pub bInterfaceNumber: u8,
}
#[test]
fn bindgen_test_layout_uvc_stream_ctrl() {
    const UNINIT: ::std::mem::MaybeUninit<uvc_stream_ctrl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uvc_stream_ctrl>(),
        40usize,
        concat!("Size of: ", stringify!(uvc_stream_ctrl))
    );
    assert_eq!(
        ::std::mem::align_of::<uvc_stream_ctrl>(),
        4usize,
        concat!("Alignment of ", stringify!(uvc_stream_ctrl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmHint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(bmHint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFormatIndex) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(bFormatIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFrameIndex) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(bFrameIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwFrameInterval) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(dwFrameInterval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wKeyFrameRate) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(wKeyFrameRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wPFrameRate) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(wPFrameRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wCompQuality) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(wCompQuality)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wCompWindowSize) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(wCompWindowSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wDelay) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(wDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwMaxVideoFrameSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(dwMaxVideoFrameSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwMaxPayloadTransferSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(dwMaxPayloadTransferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwClockFrequency) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(dwClockFrequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmFramingInfo) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(bmFramingInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bPreferredVersion) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(bPreferredVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMinVersion) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(bMinVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMaxVersion) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(bMaxVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceNumber) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_stream_ctrl),
            "::",
            stringify!(bInterfaceNumber)
        )
    );
}
#[doc = " Streaming mode, includes all information needed to select stream\n @ingroup streaming"]
pub type uvc_stream_ctrl_t = uvc_stream_ctrl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_still_ctrl {
    pub bFormatIndex: u8,
    pub bFrameIndex: u8,
    pub bCompressionIndex: u8,
    pub dwMaxVideoFrameSize: u32,
    pub dwMaxPayloadTransferSize: u32,
    pub bInterfaceNumber: u8,
}
#[test]
fn bindgen_test_layout_uvc_still_ctrl() {
    const UNINIT: ::std::mem::MaybeUninit<uvc_still_ctrl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uvc_still_ctrl>(),
        16usize,
        concat!("Size of: ", stringify!(uvc_still_ctrl))
    );
    assert_eq!(
        ::std::mem::align_of::<uvc_still_ctrl>(),
        4usize,
        concat!("Alignment of ", stringify!(uvc_still_ctrl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFormatIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_ctrl),
            "::",
            stringify!(bFormatIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFrameIndex) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_ctrl),
            "::",
            stringify!(bFrameIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bCompressionIndex) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_ctrl),
            "::",
            stringify!(bCompressionIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwMaxVideoFrameSize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_ctrl),
            "::",
            stringify!(dwMaxVideoFrameSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwMaxPayloadTransferSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_ctrl),
            "::",
            stringify!(dwMaxPayloadTransferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceNumber) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(uvc_still_ctrl),
            "::",
            stringify!(bInterfaceNumber)
        )
    );
}
pub type uvc_still_ctrl_t = uvc_still_ctrl;
extern "C" {
    pub fn uvc_init(ctx: *mut *mut uvc_context_t, usb_ctx: *mut libusb_context) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_exit(ctx: *mut uvc_context_t);
}
extern "C" {
    pub fn uvc_get_device_list(
        ctx: *mut uvc_context_t,
        list: *mut *mut *mut uvc_device_t,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_free_device_list(list: *mut *mut uvc_device_t, unref_devices: u8);
}
extern "C" {
    pub fn uvc_get_device_descriptor(
        dev: *mut uvc_device_t,
        desc: *mut *mut uvc_device_descriptor_t,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_free_device_descriptor(desc: *mut uvc_device_descriptor_t);
}
extern "C" {
    pub fn uvc_get_bus_number(dev: *mut uvc_device_t) -> u8;
}
extern "C" {
    pub fn uvc_get_device_address(dev: *mut uvc_device_t) -> u8;
}
extern "C" {
    pub fn uvc_find_device(
        ctx: *mut uvc_context_t,
        dev: *mut *mut uvc_device_t,
        vid: ::std::os::raw::c_int,
        pid: ::std::os::raw::c_int,
        sn: *const ::std::os::raw::c_char,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_find_devices(
        ctx: *mut uvc_context_t,
        devs: *mut *mut *mut uvc_device_t,
        vid: ::std::os::raw::c_int,
        pid: ::std::os::raw::c_int,
        sn: *const ::std::os::raw::c_char,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_open(dev: *mut uvc_device_t, devh: *mut *mut uvc_device_handle_t) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_close(devh: *mut uvc_device_handle_t);
}
extern "C" {
    pub fn uvc_get_device(devh: *mut uvc_device_handle_t) -> *mut uvc_device_t;
}
extern "C" {
    pub fn uvc_get_libusb_handle(devh: *mut uvc_device_handle_t) -> *mut libusb_device_handle;
}
extern "C" {
    pub fn uvc_ref_device(dev: *mut uvc_device_t);
}
extern "C" {
    pub fn uvc_unref_device(dev: *mut uvc_device_t);
}
extern "C" {
    pub fn uvc_set_status_callback(
        devh: *mut uvc_device_handle_t,
        cb: uvc_status_callback_t,
        user_ptr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uvc_set_button_callback(
        devh: *mut uvc_device_handle_t,
        cb: uvc_button_callback_t,
        user_ptr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uvc_get_camera_terminal(devh: *mut uvc_device_handle_t) -> *const uvc_input_terminal_t;
}
extern "C" {
    pub fn uvc_get_input_terminals(devh: *mut uvc_device_handle_t) -> *const uvc_input_terminal_t;
}
extern "C" {
    pub fn uvc_get_output_terminals(devh: *mut uvc_device_handle_t)
        -> *const uvc_output_terminal_t;
}
extern "C" {
    pub fn uvc_get_selector_units(devh: *mut uvc_device_handle_t) -> *const uvc_selector_unit_t;
}
extern "C" {
    pub fn uvc_get_processing_units(devh: *mut uvc_device_handle_t)
        -> *const uvc_processing_unit_t;
}
extern "C" {
    pub fn uvc_get_extension_units(devh: *mut uvc_device_handle_t) -> *const uvc_extension_unit_t;
}
extern "C" {
    pub fn uvc_get_stream_ctrl_format_size(
        devh: *mut uvc_device_handle_t,
        ctrl: *mut uvc_stream_ctrl_t,
        format: uvc_frame_format,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        fps: ::std::os::raw::c_int,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_still_ctrl_format_size(
        devh: *mut uvc_device_handle_t,
        ctrl: *mut uvc_stream_ctrl_t,
        still_ctrl: *mut uvc_still_ctrl_t,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_trigger_still(
        devh: *mut uvc_device_handle_t,
        still_ctrl: *mut uvc_still_ctrl_t,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_format_descs(arg1: *mut uvc_device_handle_t) -> *const uvc_format_desc_t;
}
extern "C" {
    pub fn uvc_probe_stream_ctrl(
        devh: *mut uvc_device_handle_t,
        ctrl: *mut uvc_stream_ctrl_t,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_probe_still_ctrl(
        devh: *mut uvc_device_handle_t,
        still_ctrl: *mut uvc_still_ctrl_t,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_start_streaming(
        devh: *mut uvc_device_handle_t,
        ctrl: *mut uvc_stream_ctrl_t,
        cb: uvc_frame_callback_t,
        user_ptr: *mut ::std::os::raw::c_void,
        flags: u8,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_start_iso_streaming(
        devh: *mut uvc_device_handle_t,
        ctrl: *mut uvc_stream_ctrl_t,
        cb: uvc_frame_callback_t,
        user_ptr: *mut ::std::os::raw::c_void,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_stop_streaming(devh: *mut uvc_device_handle_t);
}
extern "C" {
    pub fn uvc_stream_open_ctrl(
        devh: *mut uvc_device_handle_t,
        strmh: *mut *mut uvc_stream_handle_t,
        ctrl: *mut uvc_stream_ctrl_t,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_stream_ctrl(
        strmh: *mut uvc_stream_handle_t,
        ctrl: *mut uvc_stream_ctrl_t,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_stream_start(
        strmh: *mut uvc_stream_handle_t,
        cb: uvc_frame_callback_t,
        user_ptr: *mut ::std::os::raw::c_void,
        flags: u8,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_stream_start_iso(
        strmh: *mut uvc_stream_handle_t,
        cb: uvc_frame_callback_t,
        user_ptr: *mut ::std::os::raw::c_void,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_stream_get_frame(
        strmh: *mut uvc_stream_handle_t,
        frame: *mut *mut uvc_frame_t,
        timeout_us: i32,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_stream_stop(strmh: *mut uvc_stream_handle_t) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_stream_close(strmh: *mut uvc_stream_handle_t);
}
extern "C" {
    pub fn uvc_get_ctrl_len(
        devh: *mut uvc_device_handle_t,
        unit: u8,
        ctrl: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uvc_get_ctrl(
        devh: *mut uvc_device_handle_t,
        unit: u8,
        ctrl: u8,
        data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
        req_code: uvc_req_code,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uvc_set_ctrl(
        devh: *mut uvc_device_handle_t,
        unit: u8,
        ctrl: u8,
        data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uvc_get_power_mode(
        devh: *mut uvc_device_handle_t,
        mode: *mut uvc_device_power_mode,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_power_mode(
        devh: *mut uvc_device_handle_t,
        mode: uvc_device_power_mode,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_scanning_mode(
        devh: *mut uvc_device_handle_t,
        mode: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_scanning_mode(devh: *mut uvc_device_handle_t, mode: u8) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_ae_mode(
        devh: *mut uvc_device_handle_t,
        mode: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_ae_mode(devh: *mut uvc_device_handle_t, mode: u8) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_ae_priority(
        devh: *mut uvc_device_handle_t,
        priority: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_ae_priority(devh: *mut uvc_device_handle_t, priority: u8) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_exposure_abs(
        devh: *mut uvc_device_handle_t,
        time: *mut u32,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_exposure_abs(devh: *mut uvc_device_handle_t, time: u32) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_exposure_rel(
        devh: *mut uvc_device_handle_t,
        step: *mut i8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_exposure_rel(devh: *mut uvc_device_handle_t, step: i8) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_focus_abs(
        devh: *mut uvc_device_handle_t,
        focus: *mut u16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_focus_abs(devh: *mut uvc_device_handle_t, focus: u16) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_focus_rel(
        devh: *mut uvc_device_handle_t,
        focus_rel: *mut i8,
        speed: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_focus_rel(
        devh: *mut uvc_device_handle_t,
        focus_rel: i8,
        speed: u8,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_focus_simple_range(
        devh: *mut uvc_device_handle_t,
        focus: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_focus_simple_range(devh: *mut uvc_device_handle_t, focus: u8) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_focus_auto(
        devh: *mut uvc_device_handle_t,
        state: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_focus_auto(devh: *mut uvc_device_handle_t, state: u8) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_iris_abs(
        devh: *mut uvc_device_handle_t,
        iris: *mut u16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_iris_abs(devh: *mut uvc_device_handle_t, iris: u16) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_iris_rel(
        devh: *mut uvc_device_handle_t,
        iris_rel: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_iris_rel(devh: *mut uvc_device_handle_t, iris_rel: u8) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_zoom_abs(
        devh: *mut uvc_device_handle_t,
        focal_length: *mut u16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_zoom_abs(devh: *mut uvc_device_handle_t, focal_length: u16) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_zoom_rel(
        devh: *mut uvc_device_handle_t,
        zoom_rel: *mut i8,
        digital_zoom: *mut u8,
        speed: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_zoom_rel(
        devh: *mut uvc_device_handle_t,
        zoom_rel: i8,
        digital_zoom: u8,
        speed: u8,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_pantilt_abs(
        devh: *mut uvc_device_handle_t,
        pan: *mut i32,
        tilt: *mut i32,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_pantilt_abs(devh: *mut uvc_device_handle_t, pan: i32, tilt: i32) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_pantilt_rel(
        devh: *mut uvc_device_handle_t,
        pan_rel: *mut i8,
        pan_speed: *mut u8,
        tilt_rel: *mut i8,
        tilt_speed: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_pantilt_rel(
        devh: *mut uvc_device_handle_t,
        pan_rel: i8,
        pan_speed: u8,
        tilt_rel: i8,
        tilt_speed: u8,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_roll_abs(
        devh: *mut uvc_device_handle_t,
        roll: *mut i16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_roll_abs(devh: *mut uvc_device_handle_t, roll: i16) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_roll_rel(
        devh: *mut uvc_device_handle_t,
        roll_rel: *mut i8,
        speed: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_roll_rel(devh: *mut uvc_device_handle_t, roll_rel: i8, speed: u8)
        -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_privacy(
        devh: *mut uvc_device_handle_t,
        privacy: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_privacy(devh: *mut uvc_device_handle_t, privacy: u8) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_digital_window(
        devh: *mut uvc_device_handle_t,
        window_top: *mut u16,
        window_left: *mut u16,
        window_bottom: *mut u16,
        window_right: *mut u16,
        num_steps: *mut u16,
        num_steps_units: *mut u16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_digital_window(
        devh: *mut uvc_device_handle_t,
        window_top: u16,
        window_left: u16,
        window_bottom: u16,
        window_right: u16,
        num_steps: u16,
        num_steps_units: u16,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_digital_roi(
        devh: *mut uvc_device_handle_t,
        roi_top: *mut u16,
        roi_left: *mut u16,
        roi_bottom: *mut u16,
        roi_right: *mut u16,
        auto_controls: *mut u16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_digital_roi(
        devh: *mut uvc_device_handle_t,
        roi_top: u16,
        roi_left: u16,
        roi_bottom: u16,
        roi_right: u16,
        auto_controls: u16,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_backlight_compensation(
        devh: *mut uvc_device_handle_t,
        backlight_compensation: *mut u16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_backlight_compensation(
        devh: *mut uvc_device_handle_t,
        backlight_compensation: u16,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_brightness(
        devh: *mut uvc_device_handle_t,
        brightness: *mut i16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_brightness(devh: *mut uvc_device_handle_t, brightness: i16) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_contrast(
        devh: *mut uvc_device_handle_t,
        contrast: *mut u16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_contrast(devh: *mut uvc_device_handle_t, contrast: u16) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_contrast_auto(
        devh: *mut uvc_device_handle_t,
        contrast_auto: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_contrast_auto(devh: *mut uvc_device_handle_t, contrast_auto: u8) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_gain(
        devh: *mut uvc_device_handle_t,
        gain: *mut u16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_gain(devh: *mut uvc_device_handle_t, gain: u16) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_power_line_frequency(
        devh: *mut uvc_device_handle_t,
        power_line_frequency: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_power_line_frequency(
        devh: *mut uvc_device_handle_t,
        power_line_frequency: u8,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_hue(
        devh: *mut uvc_device_handle_t,
        hue: *mut i16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_hue(devh: *mut uvc_device_handle_t, hue: i16) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_hue_auto(
        devh: *mut uvc_device_handle_t,
        hue_auto: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_hue_auto(devh: *mut uvc_device_handle_t, hue_auto: u8) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_saturation(
        devh: *mut uvc_device_handle_t,
        saturation: *mut u16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_saturation(devh: *mut uvc_device_handle_t, saturation: u16) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_sharpness(
        devh: *mut uvc_device_handle_t,
        sharpness: *mut u16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_sharpness(devh: *mut uvc_device_handle_t, sharpness: u16) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_gamma(
        devh: *mut uvc_device_handle_t,
        gamma: *mut u16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_gamma(devh: *mut uvc_device_handle_t, gamma: u16) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_white_balance_temperature(
        devh: *mut uvc_device_handle_t,
        temperature: *mut u16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_white_balance_temperature(
        devh: *mut uvc_device_handle_t,
        temperature: u16,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_white_balance_temperature_auto(
        devh: *mut uvc_device_handle_t,
        temperature_auto: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_white_balance_temperature_auto(
        devh: *mut uvc_device_handle_t,
        temperature_auto: u8,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_white_balance_component(
        devh: *mut uvc_device_handle_t,
        blue: *mut u16,
        red: *mut u16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_white_balance_component(
        devh: *mut uvc_device_handle_t,
        blue: u16,
        red: u16,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_white_balance_component_auto(
        devh: *mut uvc_device_handle_t,
        white_balance_component_auto: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_white_balance_component_auto(
        devh: *mut uvc_device_handle_t,
        white_balance_component_auto: u8,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_digital_multiplier(
        devh: *mut uvc_device_handle_t,
        multiplier_step: *mut u16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_digital_multiplier(
        devh: *mut uvc_device_handle_t,
        multiplier_step: u16,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_digital_multiplier_limit(
        devh: *mut uvc_device_handle_t,
        multiplier_step: *mut u16,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_digital_multiplier_limit(
        devh: *mut uvc_device_handle_t,
        multiplier_step: u16,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_analog_video_standard(
        devh: *mut uvc_device_handle_t,
        video_standard: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_analog_video_standard(
        devh: *mut uvc_device_handle_t,
        video_standard: u8,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_analog_video_lock_status(
        devh: *mut uvc_device_handle_t,
        status: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_analog_video_lock_status(
        devh: *mut uvc_device_handle_t,
        status: u8,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_get_input_select(
        devh: *mut uvc_device_handle_t,
        selector: *mut u8,
        req_code: uvc_req_code,
    ) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_set_input_select(devh: *mut uvc_device_handle_t, selector: u8) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_perror(err: uvc_error_t, msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn uvc_strerror(err: uvc_error_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn uvc_print_diag(devh: *mut uvc_device_handle_t, stream: *mut FILE);
}
extern "C" {
    pub fn uvc_print_stream_ctrl(ctrl: *mut uvc_stream_ctrl_t, stream: *mut FILE);
}
extern "C" {
    pub fn uvc_allocate_frame(data_bytes: usize) -> *mut uvc_frame_t;
}
extern "C" {
    pub fn uvc_free_frame(frame: *mut uvc_frame_t);
}
extern "C" {
    pub fn uvc_duplicate_frame(in_: *mut uvc_frame_t, out: *mut uvc_frame_t) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_yuyv2rgb(in_: *mut uvc_frame_t, out: *mut uvc_frame_t) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_uyvy2rgb(in_: *mut uvc_frame_t, out: *mut uvc_frame_t) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_any2rgb(in_: *mut uvc_frame_t, out: *mut uvc_frame_t) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_yuyv2bgr(in_: *mut uvc_frame_t, out: *mut uvc_frame_t) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_uyvy2bgr(in_: *mut uvc_frame_t, out: *mut uvc_frame_t) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_any2bgr(in_: *mut uvc_frame_t, out: *mut uvc_frame_t) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_yuyv2y(in_: *mut uvc_frame_t, out: *mut uvc_frame_t) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_yuyv2uv(in_: *mut uvc_frame_t, out: *mut uvc_frame_t) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_mjpeg2rgb(in_: *mut uvc_frame_t, out: *mut uvc_frame_t) -> uvc_error_t;
}
extern "C" {
    pub fn uvc_mjpeg2gray(in_: *mut uvc_frame_t, out: *mut uvc_frame_t) -> uvc_error_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_streaming_interface {
    pub _address: u8,
}
